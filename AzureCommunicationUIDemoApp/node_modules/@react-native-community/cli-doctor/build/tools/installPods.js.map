{"version":3,"names":["runPodInstall","loader","directory","shouldHandleRepoUpdate","start","chalk","dim","execa","error","stderr","stdout","includes","runPodUpdate","fail","logger","Error","log","underline","runSudo","command","Promise","resolve","reject","sudo","exec","name","promptCocoaPodsInstallationQuestion","promptQuestion","reset","bold","installWithGem","installWithHomebrew","installMethod","prompts","type","message","choices","title","value","installCocoaPodsWithGem","options","_error","join","installCocoaPods","stop","succeed","brewInstall","pkg","label","installPods","NoopLoader","fs","existsSync","process","chdir","hasPods","runBundleInstall","e","info"],"sources":["../../src/tools/installPods.ts"],"sourcesContent":["import fs from 'fs';\nimport execa from 'execa';\nimport chalk from 'chalk';\nimport prompts from 'prompts';\nimport {logger, NoopLoader} from '@react-native-community/cli-tools';\nimport sudo from 'sudo-prompt';\nimport runBundleInstall from './runBundleInstall';\nimport {brewInstall} from './brewInstall';\nimport {Loader} from '../types';\n\ntype PromptCocoaPodsInstallation = {\n  installMethod: 'gem' | 'homebrew';\n  promptQuestion: string;\n};\n\nasync function runPodInstall(\n  loader: Loader,\n  directory: string,\n  shouldHandleRepoUpdate: boolean = true,\n) {\n  try {\n    loader.start(\n      `Installing CocoaPods dependencies ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n\n    await execa('bundle', ['exec', 'pod', 'install']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    const stderr = error.stderr || error.stdout;\n\n    /**\n     * If CocoaPods failed due to repo being out of date, it will\n     * include the update command in the error message.\n     *\n     * `shouldHandleRepoUpdate` will be set to `false` to\n     * prevent infinite loop (unlikely scenario)\n     */\n    if (stderr.includes('pod repo update') && shouldHandleRepoUpdate) {\n      await runPodUpdate(loader);\n      await runPodInstall(loader, directory, false);\n    } else {\n      loader.fail();\n      logger.error(stderr);\n\n      throw new Error(\n        'Looks like your iOS environment is not properly set. Please go to https://reactnative.dev/docs/next/environment-setup and follow the React Native CLI QuickStart guide for macOS and iOS.',\n      );\n    }\n  }\n}\n\nasync function runPodUpdate(loader: Loader) {\n  try {\n    loader.start(\n      `Updating CocoaPods repositories ${chalk.dim(\n        '(this may take a few minutes)',\n      )}`,\n    );\n    await execa('pod', ['repo', 'update']);\n  } catch (error) {\n    // \"pod\" command outputs errors to stdout (at least some of them)\n    logger.log(error.stderr || error.stdout);\n    loader.fail();\n\n    throw new Error(\n      `Failed to update CocoaPods repositories for iOS project.\\nPlease try again manually: \"pod repo update\".\\nCocoaPods documentation: ${chalk.dim.underline(\n        'https://cocoapods.org/',\n      )}`,\n    );\n  }\n}\n\nfunction runSudo(command: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    sudo.exec(command, {name: 'React Native CLI'}, (error) => {\n      if (error) {\n        reject(error);\n      }\n\n      resolve();\n    });\n  });\n}\n\nasync function promptCocoaPodsInstallationQuestion(): Promise<\n  PromptCocoaPodsInstallation\n> {\n  const promptQuestion = `CocoaPods ${chalk.dim.underline(\n    '(https://cocoapods.org/)',\n  )} ${chalk.reset.bold(\n    'is not installed. CocoaPods is necessary for the iOS project to run correctly. Do you want to install it?',\n  )}`;\n  const installWithGem = 'Yes, with gem (may require sudo)';\n  const installWithHomebrew = 'Yes, with Homebrew';\n\n  const {installMethod} = await prompts([\n    {\n      type: 'select',\n      name: 'installMethod',\n      message: promptQuestion,\n      choices: [\n        {title: installWithGem, value: 'gem'},\n        {title: installWithHomebrew, value: 'homebrew'},\n      ],\n    },\n  ]);\n\n  return {\n    installMethod,\n    // This is used for removing the message in `doctor` after it's answered\n    promptQuestion: `? ${promptQuestion} ${\n      installMethod === 'gem' ? installWithGem : installWithHomebrew\n    }`,\n  };\n}\n\nasync function installCocoaPodsWithGem() {\n  const options = ['install', 'cocoapods', '--no-document'];\n\n  try {\n    // First attempt to install `cocoapods`\n    await execa('gem', options);\n  } catch (_error) {\n    // If that doesn't work then try with sudo\n    await runSudo(`gem ${options.join(' ')}`);\n  }\n}\n\nasync function installCocoaPods(loader: Loader) {\n  loader.stop();\n\n  const {installMethod} = await promptCocoaPodsInstallationQuestion();\n\n  if (installMethod === 'gem') {\n    loader.start('Installing CocoaPods');\n\n    try {\n      await installCocoaPodsWithGem();\n\n      return loader.succeed();\n    } catch (error) {\n      loader.fail();\n      logger.error(error.stderr);\n\n      throw new Error(\n        `An error occured while trying to install CocoaPods, which is required by this template.\\nPlease try again manually: sudo gem install cocoapods.\\nCocoaPods documentation: ${chalk.dim.underline(\n          'https://cocoapods.org/',\n        )}`,\n      );\n    }\n  }\n\n  if (installMethod === 'homebrew') {\n    return await brewInstall({\n      pkg: 'cocoapods',\n      label: 'Installing CocoaPods',\n      loader,\n    });\n  }\n}\n\nasync function installPods({\n  directory,\n  loader,\n}: {\n  directory: string;\n  loader?: Loader;\n}) {\n  loader = loader || new NoopLoader();\n  try {\n    if (!fs.existsSync('ios')) {\n      return;\n    }\n\n    process.chdir('ios');\n\n    const hasPods = fs.existsSync('Podfile');\n\n    if (!hasPods) {\n      return;\n    }\n\n    if (fs.existsSync('../Gemfile')) {\n      await runBundleInstall(loader);\n    }\n\n    try {\n      // Check if \"pod\" is available and usable. It happens that there are\n      // multiple versions of \"pod\" command and even though it's there, it exits\n      // with a failure\n      await execa('pod', ['--version']);\n    } catch (e) {\n      loader.info();\n      await installCocoaPods(loader);\n    }\n\n    await runPodInstall(loader, directory);\n  } finally {\n    process.chdir('..');\n  }\n}\n\nexport {promptCocoaPodsInstallationQuestion, runSudo, installCocoaPods};\n\nexport default installPods;\n"],"mappings":"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"}