{"version":3,"names":["runIOS","_","ctx","args","project","ios","CLIError","xcodeProject","sourceDir","process","chdir","binaryPath","path","isAbsolute","join","root","fs","existsSync","configuration","logger","warn","mode","projectInfo","getProjectInfo","checkIfConfigurationExists","inferredSchemeName","basename","name","extname","scheme","getConfigurationScheme","info","isWorkspace","chalk","bold","availableDevices","listIOSDevices","listDevices","device","udid","selectedDevice","promptForDeviceSelection","type","runOnSimulator","runOnDevice","simulator","bootedDevices","filter","isAvailable","simulators","getSimulators","bootedSimulators","Object","keys","devices","map","key","reduce","acc","val","concat","state","booted","length","runOnBootedDevicesSimulators","error","find","d","printFoundDevices","physicalDevices","matchingDevice","JSON","parse","child_process","execFileSync","encoding","selectedSimulator","fallbackSimulators","getDestinationSimulator","activeDeveloperDir","trim","bootSimulator","buildOutput","appPath","buildProject","getBuildPath","spawnSync","stdio","bundleID","result","status","success","stderr","toString","isIOSDeployInstalled","appProcess","spawn","detached","unref","iosDeployInstallArgs","iosDeployOutput","message","simulatorFullName","formattedDeviceName","getTargetPaths","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","targetBuildDir","TARGET_BUILD_DIR","executableFolderPath","EXECUTABLE_FOLDER_PATH","isCatalyst","getPlatformName","platformNameMatch","exec","deviceName","firstIOSDevice","undefined","deviceByName","String","version","description","func","examples","desc","cmd","options","iosBuildOptions"],"sources":["../../../src/commands/runIOS/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process from 'child_process';\nimport path from 'path';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport {Config, IOSProjectInfo} from '@react-native-community/cli-types';\nimport {getDestinationSimulator} from '../../tools/getDestinationSimulator';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport {BuildFlags, buildProject} from '../buildIOS/buildProject';\nimport {iosBuildOptions} from '../buildIOS';\nimport {Device} from '../../types';\nimport listIOSDevices from '../../tools/listIOSDevices';\nimport {checkIfConfigurationExists} from '../../tools/checkIfConfigurationExists';\nimport {getProjectInfo} from '../../tools/getProjectInfo';\nimport {getConfigurationScheme} from '../../tools/getConfigurationScheme';\nimport {promptForDeviceSelection} from '../../tools/prompts';\n\nexport interface FlagsT extends BuildFlags {\n  simulator?: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  binaryPath?: string;\n  listDevices?: boolean;\n}\n\nasync function runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!ctx.project.ios) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  const {xcodeProject, sourceDir} = ctx.project.ios;\n\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${sourceDir}\" folder`,\n    );\n  }\n\n  process.chdir(sourceDir);\n\n  if (args.binaryPath) {\n    args.binaryPath = path.isAbsolute(args.binaryPath)\n      ? args.binaryPath\n      : path.join(ctx.root, args.binaryPath);\n\n    if (!fs.existsSync(args.binaryPath)) {\n      throw new CLIError(\n        'binary-path was specified, but the file was not found.',\n      );\n    }\n  }\n\n  if (args.configuration) {\n    logger.warn('--configuration has been deprecated. Use --mode instead.');\n    logger.warn(\n      'Parameters were automatically reassigned to --mode on this run.',\n    );\n    args.mode = args.configuration;\n  }\n\n  const projectInfo = getProjectInfo();\n\n  if (args.mode) {\n    checkIfConfigurationExists(projectInfo, args.mode);\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  args.mode = getConfigurationScheme(\n    {scheme: args.scheme, mode: args.mode},\n    sourceDir,\n  );\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  const availableDevices = listIOSDevices();\n\n  if (args.listDevices) {\n    if (args.device || args.udid) {\n      logger.warn(\n        `Both ${\n          args.device ? 'device' : 'udid'\n        } and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one.`,\n      );\n    }\n    const selectedDevice = await promptForDeviceSelection(availableDevices);\n    if (!selectedDevice) {\n      throw new CLIError(\n        'Failed to select device, please try to run app without \"list-devices\" command.',\n      );\n    }\n    if (selectedDevice.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args, selectedDevice);\n    } else {\n      return runOnDevice(selectedDevice, scheme, xcodeProject, args);\n    }\n  }\n\n  if (!args.device && !args.udid && !args.simulator) {\n    const bootedDevices = availableDevices.filter(\n      ({type, isAvailable}) => type === 'device' && isAvailable,\n    );\n\n    const simulators = getSimulators();\n    const bootedSimulators = Object.keys(simulators.devices)\n      .map((key) => simulators.devices[key])\n      .reduce((acc, val) => acc.concat(val), [])\n      .filter(({state}) => state === 'Booted');\n\n    const booted = [...bootedDevices, ...bootedSimulators];\n    if (booted.length === 0) {\n      logger.info(\n        'No booted devices or simulators found. Launching first available simulator...',\n      );\n      return runOnSimulator(xcodeProject, scheme, args);\n    }\n\n    logger.info(`Found booted ${booted.map(({name}) => name).join(', ')}`);\n\n    return runOnBootedDevicesSimulators(\n      scheme,\n      xcodeProject,\n      args,\n      bootedDevices,\n      bootedSimulators,\n    );\n  }\n\n  if (args.device && args.udid) {\n    return logger.error(\n      'The `device` and `udid` options are mutually exclusive.',\n    );\n  }\n\n  if (args.udid) {\n    const device = availableDevices.find((d) => d.udid === args.udid);\n    if (!device) {\n      return logger.error(\n        `Could not find a device with udid: \"${chalk.bold(\n          args.udid,\n        )}\". ${printFoundDevices(availableDevices)}`,\n      );\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else if (args.device) {\n    const physicalDevices = availableDevices.filter(\n      (d) => d.type !== 'simulator',\n    );\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    runOnSimulator(xcodeProject, scheme, args);\n  }\n}\n\nconst getSimulators = () => {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n  return simulators;\n};\n\nasync function runOnBootedDevicesSimulators(\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n  devices: Device[],\n  simulators: Device[],\n) {\n  for (const device of devices) {\n    await runOnDevice(device, scheme, xcodeProject, args);\n  }\n\n  for (const simulator of simulators) {\n    await runOnSimulator(xcodeProject, scheme, args, simulator);\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: IOSProjectInfo,\n  scheme: string,\n  args: FlagsT,\n  simulator?: Device,\n) {\n  // let selectedSimulator;\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone 14\n   * - iPhone 13\n   * - iPhone 12\n   * - iPhone 11\n   */\n\n  let selectedSimulator;\n  if (simulator) {\n    selectedSimulator = simulator;\n  } else {\n    const fallbackSimulators = [\n      'iPhone 14',\n      'iPhone 13',\n      'iPhone 12',\n      'iPhone 11',\n    ];\n    selectedSimulator = getDestinationSimulator(args, fallbackSimulators);\n  }\n\n  if (!selectedSimulator) {\n    throw new CLIError(\n      `No simulator available with ${\n        args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`\n      }`,\n    );\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  let buildOutput, appPath;\n  if (!args.binaryPath) {\n    buildOutput = await buildProject(\n      xcodeProject,\n      selectedSimulator.udid,\n      scheme,\n      args,\n    );\n\n    appPath = getBuildPath(\n      xcodeProject,\n      args.mode || args.configuration,\n      buildOutput,\n      scheme,\n    );\n  } else {\n    appPath = args.binaryPath;\n  }\n\n  logger.info(\n    `Installing \"${chalk.bold(appPath)} on ${selectedSimulator.name}\"`,\n  );\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error(\n      'Failed to launch the app on simulator',\n      result.stderr.toString(),\n    );\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n) {\n  if (args.binaryPath && selectedDevice.type === 'catalyst') {\n    throw new CLIError(\n      'binary-path was specified for catalyst device, which is not supported.',\n    );\n  }\n\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  if (selectedDevice.type === 'catalyst') {\n    const buildOutput = await buildProject(\n      xcodeProject,\n      selectedDevice.udid,\n      scheme,\n      args,\n    );\n\n    const appPath = getBuildPath(\n      xcodeProject,\n      args.mode || args.configuration,\n      buildOutput,\n      scheme,\n      true,\n    );\n    const appProcess = child_process.spawn(`${appPath}/${scheme}`, [], {\n      detached: true,\n      stdio: 'ignore',\n    });\n    appProcess.unref();\n  } else {\n    let buildOutput, appPath;\n    if (!args.binaryPath) {\n      buildOutput = await buildProject(\n        xcodeProject,\n        selectedDevice.udid,\n        scheme,\n        args,\n      );\n\n      appPath = getBuildPath(\n        xcodeProject,\n        args.mode || args.configuration,\n        buildOutput,\n        scheme,\n      );\n    } else {\n      appPath = args.binaryPath;\n    }\n\n    const iosDeployInstallArgs = [\n      '--bundle',\n      appPath,\n      '--id',\n      selectedDevice.udid,\n      '--justlaunch',\n    ];\n\n    logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n    const iosDeployOutput = child_process.spawnSync(\n      'ios-deploy',\n      iosDeployInstallArgs,\n      {encoding: 'utf8'},\n    );\n\n    if (iosDeployOutput.error) {\n      throw new CLIError(\n        `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`,\n      );\n    }\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n\n  child_process.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\n\nfunction getTargetPaths(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH,\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(\n  xcodeProject: IOSProjectInfo,\n  mode: BuildFlags['mode'],\n  buildOutput: string,\n  scheme: string,\n  isCatalyst: boolean = false,\n) {\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      getPlatformName(buildOutput),\n      '-configuration',\n      mode,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const {targetBuildDir, executableFolderPath} = getTargetPaths(buildSettings);\n\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new CLIError('Failed to get the app name.');\n  }\n\n  return `${targetBuildDir}${\n    isCatalyst ? '-maccatalyst' : ''\n  }/${executableFolderPath}`;\n}\n\nfunction getPlatformName(buildOutput: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(\n    buildOutput,\n  );\n  if (!platformNameMatch) {\n    throw new CLIError(\n      'Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.',\n    );\n  }\n  return platformNameMatch[1];\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find((d) => d.type === 'device')!;\n    if (firstIOSDevice) {\n      logger.info(\n        `Using first available device named \"${chalk.bold(\n          firstIOSDevice.name,\n        )}\" due to lack of name supplied.`,\n      );\n      return firstIOSDevice;\n    } else {\n      logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(\n    (device) =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n  if (!deviceByName) {\n    logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(deviceName),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return simulator.version\n    ? `${simulator.name} (${simulator.version})`\n    : simulator.name;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map((device) => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n      cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    ...iosBuildOptions,\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--binary-path <string>',\n      description:\n        'Path relative to project root where pre-built .app binary lives.',\n    },\n    {\n      name: '--list-devices',\n      description:\n        'List all available iOS devices and simulators and let you choose one to run the app. ',\n    },\n  ],\n};\n"],"mappings":"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"}