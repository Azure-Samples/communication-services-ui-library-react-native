{"version":3,"names":["INTERNAL_CALLSITES_REGEX","RegExp","join","getDefaultConfig","ctx","outOfTreePlatforms","Object","keys","platforms","filter","platform","npmPackageName","resolver","resolveRequest","length","undefined","reactNativePlatformResolver","reduce","result","resolverMainFields","serializer","getModulesRunBeforeMainModule","require","resolve","path","reactNativePath","map","getPolyfills","server","port","Number","process","env","RCT_METRO_PORT","symbolicator","customizeFrame","frame","collapse","Boolean","file","test","transformer","allowOptionalDependencies","babelTransformerPath","assetRegistryPath","asyncRequireModulePath","watchFolders","loadMetroConfig","options","defaultConfig","reporter","loadConfig","cwd","root"],"sources":["../../src/tools/loadMetroConfig.ts"],"sourcesContent":["/**\n * Configuration file of Metro.\n */\nimport path from 'path';\n// @ts-ignore - no typed definition for the package\nimport {loadConfig} from 'metro-config';\nimport type {Config} from '@react-native-community/cli-types';\nimport {reactNativePlatformResolver} from './metroPlatformResolver';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/implementations/.+\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n    '/Libraries/YellowBox/.+\\\\.js$',\n    '/Libraries/LogBox/.+\\\\.js$',\n    '/Libraries/Core/Timers/.+\\\\.js$',\n    '/Libraries/WebSocket/.+\\\\.js$',\n    '/Libraries/vendor/.+\\\\.js$',\n    '/node_modules/react-devtools-core/.+\\\\.js$',\n    '/node_modules/react-refresh/.+\\\\.js$',\n    '/node_modules/scheduler/.+\\\\.js$',\n    '/node_modules/event-target-shim/.+\\\\.js$',\n    '/node_modules/invariant/.+\\\\.js$',\n    '/node_modules/react-native/index.js$',\n    '/metro-runtime/.+\\\\.js$',\n    '^\\\\[native code\\\\]$',\n  ].join('|'),\n);\n\nexport type {Config};\n\nexport type ConfigLoadingContext = Pick<\n  Config,\n  'root' | 'reactNativePath' | 'platforms'\n>;\n\nexport interface MetroConfig {\n  resolver: {\n    resolveRequest?: (\n      context: any,\n      realModuleName: string,\n      platform: string,\n      moduleName: string,\n    ) => any;\n    resolverMainFields: string[];\n    platforms: string[];\n  };\n  serializer: {\n    getModulesRunBeforeMainModule: () => string[];\n    getPolyfills: () => any;\n  };\n  server: {\n    port: number;\n    enhanceMiddleware?: Function;\n  };\n  symbolicator: {\n    customizeFrame: (frame: {file: string | null}) => {collapse: boolean};\n  };\n  transformer: {\n    allowOptionalDependencies?: boolean;\n    babelTransformerPath: string;\n    assetRegistryPath: string;\n    assetPlugins?: Array<string>;\n    asyncRequireModulePath?: string;\n  };\n  watchFolders: ReadonlyArray<string>;\n  reporter?: any;\n}\n\n/**\n * Default configuration\n */\nexport const getDefaultConfig = (ctx: ConfigLoadingContext): MetroConfig => {\n  const outOfTreePlatforms = Object.keys(ctx.platforms).filter(\n    (platform) => ctx.platforms[platform].npmPackageName,\n  );\n\n  return {\n    resolver: {\n      resolveRequest:\n        outOfTreePlatforms.length === 0\n          ? undefined\n          : reactNativePlatformResolver(\n              outOfTreePlatforms.reduce<{[platform: string]: string}>(\n                (result, platform) => {\n                  result[platform] = ctx.platforms[platform].npmPackageName!;\n                  return result;\n                },\n                {},\n              ),\n            ),\n      resolverMainFields: ['react-native', 'browser', 'main'],\n      platforms: [...Object.keys(ctx.platforms), 'native'],\n    },\n    serializer: {\n      // We can include multiple copies of InitializeCore here because metro will\n      // only add ones that are already part of the bundle\n      getModulesRunBeforeMainModule: () => [\n        require.resolve(\n          path.join(ctx.reactNativePath, 'Libraries/Core/InitializeCore'),\n        ),\n        ...outOfTreePlatforms.map((platform) =>\n          require.resolve(\n            `${ctx.platforms[platform]\n              .npmPackageName!}/Libraries/Core/InitializeCore`,\n          ),\n        ),\n      ],\n      getPolyfills: () =>\n        require(path.join(ctx.reactNativePath, 'rn-get-polyfills'))(),\n    },\n    server: {\n      port: Number(process.env.RCT_METRO_PORT) || 8081,\n    },\n    symbolicator: {\n      customizeFrame: (frame: {file: string | null}) => {\n        const collapse = Boolean(\n          frame.file && INTERNAL_CALLSITES_REGEX.test(frame.file),\n        );\n        return {collapse};\n      },\n    },\n    transformer: {\n      allowOptionalDependencies: true,\n      babelTransformerPath: require.resolve(\n        'metro-react-native-babel-transformer',\n      ),\n      assetRegistryPath: 'react-native/Libraries/Image/AssetRegistry',\n      asyncRequireModulePath: require.resolve(\n        'metro-runtime/src/modules/asyncRequire',\n      ),\n    },\n    watchFolders: [],\n  };\n};\n\nexport interface ConfigOptionsT {\n  maxWorkers?: number;\n  port?: number;\n  projectRoot?: string;\n  resetCache?: boolean;\n  watchFolders?: string[];\n  sourceExts?: string[];\n  reporter?: any;\n  config?: string;\n}\n\n/**\n * Loads Metro Config and applies `options` on top of the resolved config.\n *\n * This allows the CLI to always overwrite the file settings.\n */\nexport default function loadMetroConfig(\n  ctx: ConfigLoadingContext,\n  options?: ConfigOptionsT,\n): Promise<MetroConfig> {\n  const defaultConfig = getDefaultConfig(ctx);\n  if (options && options.reporter) {\n    defaultConfig.reporter = options.reporter;\n  }\n  return loadConfig({cwd: ctx.root, ...options}, defaultConfig);\n}\n"],"mappings":"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"}